// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mimp_state.proto

#include "mimp_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr MimpState::MimpState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tool_trafo_()
  , closest_point_()
  , coordinates_()
  , triangle_id_(int64_t{0}){}
struct MimpStateDefaultTypeInternal {
  constexpr MimpStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MimpStateDefaultTypeInternal() {}
  union {
    MimpState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MimpStateDefaultTypeInternal _MimpState_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mimp_5fstate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mimp_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mimp_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mimp_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MimpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MimpState, tool_trafo_),
  PROTOBUF_FIELD_OFFSET(::MimpState, closest_point_),
  PROTOBUF_FIELD_OFFSET(::MimpState, coordinates_),
  PROTOBUF_FIELD_OFFSET(::MimpState, triangle_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MimpState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MimpState_default_instance_),
};

const char descriptor_table_protodef_mimp_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020mimp_state.proto\"`\n\tMimpState\022\022\n\ntool_"
  "trafo\030\001 \003(\001\022\025\n\rclosest_point\030\002 \003(\001\022\023\n\013co"
  "ordinates\030\003 \003(\001\022\023\n\013triangle_id\030\004 \001(\003b\006pr"
  "oto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mimp_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mimp_5fstate_2eproto = {
  false, false, 124, descriptor_table_protodef_mimp_5fstate_2eproto, "mimp_state.proto", 
  &descriptor_table_mimp_5fstate_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_mimp_5fstate_2eproto::offsets,
  file_level_metadata_mimp_5fstate_2eproto, file_level_enum_descriptors_mimp_5fstate_2eproto, file_level_service_descriptors_mimp_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mimp_5fstate_2eproto_getter() {
  return &descriptor_table_mimp_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mimp_5fstate_2eproto(&descriptor_table_mimp_5fstate_2eproto);

// ===================================================================

class MimpState::_Internal {
 public:
};

MimpState::MimpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tool_trafo_(arena),
  closest_point_(arena),
  coordinates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MimpState)
}
MimpState::MimpState(const MimpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tool_trafo_(from.tool_trafo_),
      closest_point_(from.closest_point_),
      coordinates_(from.coordinates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  triangle_id_ = from.triangle_id_;
  // @@protoc_insertion_point(copy_constructor:MimpState)
}

inline void MimpState::SharedCtor() {
triangle_id_ = int64_t{0};
}

MimpState::~MimpState() {
  // @@protoc_insertion_point(destructor:MimpState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MimpState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MimpState::ArenaDtor(void* object) {
  MimpState* _this = reinterpret_cast< MimpState* >(object);
  (void)_this;
}
void MimpState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MimpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MimpState::Clear() {
// @@protoc_insertion_point(message_clear_start:MimpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tool_trafo_.Clear();
  closest_point_.Clear();
  coordinates_.Clear();
  triangle_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MimpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double tool_trafo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_tool_trafo(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_tool_trafo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double closest_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_closest_point(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_closest_point(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double coordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coordinates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_coordinates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 triangle_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          triangle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MimpState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MimpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double tool_trafo = 1;
  if (this->_internal_tool_trafo_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_tool_trafo(), target);
  }

  // repeated double closest_point = 2;
  if (this->_internal_closest_point_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_closest_point(), target);
  }

  // repeated double coordinates = 3;
  if (this->_internal_coordinates_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_coordinates(), target);
  }

  // int64 triangle_id = 4;
  if (this->_internal_triangle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_triangle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MimpState)
  return target;
}

size_t MimpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MimpState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double tool_trafo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_tool_trafo_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double closest_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_closest_point_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated double coordinates = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coordinates_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // int64 triangle_id = 4;
  if (this->_internal_triangle_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_triangle_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MimpState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MimpState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MimpState::GetClassData() const { return &_class_data_; }

void MimpState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MimpState *>(to)->MergeFrom(
      static_cast<const MimpState &>(from));
}


void MimpState::MergeFrom(const MimpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MimpState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tool_trafo_.MergeFrom(from.tool_trafo_);
  closest_point_.MergeFrom(from.closest_point_);
  coordinates_.MergeFrom(from.coordinates_);
  if (from._internal_triangle_id() != 0) {
    _internal_set_triangle_id(from._internal_triangle_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MimpState::CopyFrom(const MimpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MimpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MimpState::IsInitialized() const {
  return true;
}

void MimpState::InternalSwap(MimpState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tool_trafo_.InternalSwap(&other->tool_trafo_);
  closest_point_.InternalSwap(&other->closest_point_);
  coordinates_.InternalSwap(&other->coordinates_);
  swap(triangle_id_, other->triangle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MimpState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mimp_5fstate_2eproto_getter, &descriptor_table_mimp_5fstate_2eproto_once,
      file_level_metadata_mimp_5fstate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MimpState* Arena::CreateMaybeMessage< ::MimpState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MimpState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
